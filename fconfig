#!/usr/bin/env php
<?php declare(strict_types=1);
if (version_compare("7.2.0", PHP_VERSION, ">")) {
    fwrite(
        STDERR,
        sprintf(
            "This version of PHPUnit is supported on PHP 7.2 and PHP 7.3." . PHP_EOL .
            "You are using PHP %s (%s)." . PHP_EOL,
            PHP_VERSION,
            PHP_BINARY
        )
    );
    
    die(1);
}

foreach ([__DIR__ . "/../../autoload.php", __DIR__ . "/../vendor/autoload.php", __DIR__ . "/vendor/autoload.php"] as $file) {
    if (file_exists($file)) {
        define("PHPUNIT_COMPOSER_INSTALL", $file);
        break;
    }
}

unset($file);
if (!defined("PHPUNIT_COMPOSER_INSTALL")) {
    fwrite(
        STDERR,
        "You need to set up the project dependencies using Composer:" . PHP_EOL . PHP_EOL .
        "    composer install" . PHP_EOL . PHP_EOL .
        "You can learn all about Composer on https://getcomposer.org/." . PHP_EOL
    );
    
    die(1);
}

require_once PHPUNIT_COMPOSER_INSTALL;

if ($argc !== 4) {
    echo "Usage: ./fconfig encrypt|decrypt {secret} {value}" . PHP_EOL;
    die(1);
}

if (!in_array($argv[1], ["encrypt", "decrypt"], true)) {
    echo "Usage: ./fconfig encrypt|decrypt {secret} {value}" . PHP_EOL;
    die(1);
}

try {
    $crypter = new \Fluix\Config\Crypt\DefaultCrypt(\Fluix\Config\Crypt\Secret::fromString($argv[2]));
    echo ("encrypt" === $argv[1] ? $crypter->encrypt($argv[3]) : $crypter->decrypt($argv[3])) . PHP_EOL;
} catch (\Throwable $e) {
    echo "Usage: ./fconfig encrypt|decrypt {secret} {value}" . PHP_EOL;
    fwrite(
        STDERR,
        $e->getMessage() . PHP_EOL
    );
    
    die(1);
}
